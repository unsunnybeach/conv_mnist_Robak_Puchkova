import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from matplotlib import pyplot as plt


n_epochs = 3 #liczba epok, czyli ile razy przejdziemy przez cały zbiór treningowy
batch_size_train = 64
batch_size_test = 1000
learning_rate = 0.01
momentum = 0.5
log_interval = 10

# Ustawiamy seed liczb losowych dla powtarzalności wyników oraz w domyślnych ustawieniach 
# cuDNN może korzystać z algorytmów niedeterministycznych, co oznacza, że wyniki niektórych operacji 
# (np. mnożenie macierzy) mogą się różnić między uruchomieniami. Ustawieniem False 
# zmuszamy PyTorch do użycia bardziej deterministycznych algorytmów, które zawsze dają te same wyniki
random_seed = 1
torch.backends.cudnn.enabled = False
torch.manual_seed(random_seed)

# Przygotowujemy DataLoaders dla zbioru danych MNIST
# shuffle=True  aby dane były losowo mieszane w każdej epoce
# Normalizujemy dane, używając średniej (0.1307) i odchylenia standardowego (0.3081)
train_loader = torch.utils.data.DataLoader(
    torchvision.datasets.MNIST('/files/', train=True, download=True,
                                transform=torchvision.transforms.Compose([
                                    torchvision.transforms.ToTensor(),
                                    torchvision.transforms.Normalize(
                                        (0.1307,), (0.3081,))
                                ])),
    batch_size=batch_size_train, shuffle=True)

test_loader = torch.utils.data.DataLoader(
    torchvision.datasets.MNIST('/files/', train=False, download=True,
                                transform=torchvision.transforms.Compose([
                                    torchvision.transforms.ToTensor(),
                                    torchvision.transforms.Normalize(
                                        (0.1307,), (0.3081,))
                                ])),
    batch_size=batch_size_test, shuffle=True)

# Sprawdziłyśmy kształt danych - obrazy 28x28 pikseli w skali szarości (1 kanał)
#Po pierwszej warstwie konwolucyjnej (z rozmiarem 28x28 na 24x24) i poolingowej, otrzymujemy 10 map cech 12x12.
#Po drugiej warstwie konwolucyjnej i poolingowej, wynikowy rozmiar to 20 map cech o rozmiarze 4x4.
#Łącznie daje to 320 (20 x 4 x 4) wartości, które muszą zostać spłaszczone do wektora przed wejściem do warstwy w pełni połączonej (fully connected layer).

# Definicja modelu
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        # Dwie warstwy konwolucyjne:
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)  # 1 kanał wejściowy, 10 filtrów, kernel 5x5
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)  # 20 filtrów wyjściowych
        self.conv2_drop = nn.Dropout2d()  # Dropout dla regularizacji
        # Dwie warstwy w pełni połączone:
        self.fc1 = nn.Linear(320, 50)  # Warstwa ukryta: 320 wejść, 50 wyjść
        self.fc2 = nn.Linear(50, 10)  # Wyjście: 10 klas dla MNIST

    def forward(self, x):
        # Przechodzimy przez warstwy sieci z odpowiednimi aktywacjami:
        x = F.relu(F.max_pool2d(self.conv1(x), 2))
        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))
        x = x.view(-1, 320) # Spłaszczamy dane do wektora
        x = F.relu(self.fc1(x))  # Warstwa w pełni połączona + ReLU
        x = F.dropout(x, training=self.training) # Dropout podczas treningu
        x = self.fc2(x)  # Warstwa wyjściowa
        # Log-softmax na końcu, dla klasyfikacji
        return F.log_softmax(x, dim=1)

# Inicjalizacja urządzenia (CPU lub GPU)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
network = Net().to(device)
optimizer = optim.SGD(network.parameters(), lr=learning_rate, momentum=momentum)

# Listy do śledzenia strat
train_losses = []
train_counter = []
test_losses = []
test_counter = [i * len(train_loader.dataset) for i in range(n_epochs + 1)]



# Funkcja pętli treningowej
def train(epoch):
    network.train() # Ustawiamy tryb treningowy
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)  # Przeniesienie danych na urządzenie
        optimizer.zero_grad() # Zerowanie gradientów
        output = network(data) # Przepuszczenie danych przez sieć
        loss = F.nll_loss(output, target) # Obliczenie straty (negative log-likelihood loss)
        loss.backward()
        optimizer.step()  # Aktualizacja parametrów sieci
        if batch_idx % log_interval == 0: # Logi
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))
            train_losses.append(loss.item())
            train_counter.append(
                (batch_idx * batch_size_train) + ((epoch - 1) * len(train_loader.dataset)))
            #Zapisujemy model i optymalizator
            torch.save(network.state_dict(), '/content/results/model.pth')
            torch.save(optimizer.state_dict(), '/content/results/optimizer.pth')


# Funkcja pętli testowej
def test():
    network.eval() # Ustawiamy tryb ewaluacji
    test_loss = 0
    correct = 0
    with torch.no_grad(): # Nie przechowujemy gradientów
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)  # Przeniesienie danych na urządzenie
            output = network(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item() 
            pred = output.data.max(1, keepdim=True)[1] # Predykcja
            correct += pred.eq(target.data.view_as(pred)).sum().item() # Liczba poprawnych klasyfikacji
    test_loss /= len(test_loader.dataset) # Obliczenie średniej straty
    test_losses.append(test_loss)
    print('\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))

# Tworzenie katalogu na wyniki w Google Colab
import os
os.makedirs('/content/results/', exist_ok=True)

# Test sieci przed treningiem
test()

# Trening sieci
for epoch in range(1, n_epochs + 1):
    train(epoch)
    test()

# Wykres strat
fig = plt.figure()
plt.plot(train_counter, train_losses, color='blue')
plt.scatter(test_counter, test_losses, color='red')
plt.legend(['Train Loss', 'Test Loss'], loc='upper right')
plt.xlabel('Number of training examples seen')
plt.ylabel('Negative log likelihood loss')
plt.show()


#Spadek straty (niebieskie) sugeruje, że model z każdym krokiem poprawia swoje przewidywania na zbiorze treningowym
#Czerwone kropki reprezentują stratę obliczoną na zbiorze testowym po każdej epoce
#Wartość testowej straty obliczana jest na podstawie wyników modelu na danych testowych, które model widział po raz pierwszy (więc nie ma wpływu na jego trenowanie)
#Testowa strata również maleje, co sugeruje, że model nie jest przeuczony i działa jak powinien
